Test Management is the planning, monitoring and control of tests.


Test Leader:
- Manages testing;
- Coordinates strategy;
- Plans tests;
- Set up testware or traceability;
- Decide implementation of test environment;

Tester: 
- Reviews and contributes to test plans;
- Setup test environment;
- Automate tests;
- Measure performance of components;
- Review tests;

Test Planning:
- Decide what to test;
- Determine scope and objectives of testing;
- Selecting metrics for monitoring and controlling test preparation and execution;

Entry criteria:
- Is the test environment ready and available?
- Is the tool ready?
- Is the data for the test available?

Exit criteria:
- Thoroughness of coverage and whatnot;
- Cost;

Test estimation: 
- Calculated approximation of result;
- Previous runs information helps;
- Experts can help identify the cost;

Test Case Monitoring:
- Percentage of work done;

Test Strategy or Approach:
- Analytical approaches (target areas of higher risk);
- Model based approaches (use statistical information about failure rates or usage);
- Methodical approaches (failure based, experience based, checklist based...);
- Process approaches (dictated by standadrds or programming methodologies);
- Dynamic and heuristic (testing is unpredicable, testing reacts to changes);
- Consultative approach (testing is guided by experts);
- Regression-averse approaches (include reuse of previous test material);
- Risk based approach:
    Attempt to find critical defects early on;
    Can have organizational factors, technical issues, supplier issues, product risks;

Test independence can range from developers testing their own code, to outsourcing testing to an independent team. The higher the independence, the bigger the isolation from dev team. However it promotes an unbiased look at the code. 

Incident management is recognizing, investigating, taking action and disposing of incidents.

Incident reports give developers feedback about problems;

Incidents arise when results vary from expected outcomes;
