Security Testing:
- Vulnerability scanning: scan against known vulnerabilities;
- Security scanning: identifying network and system weakness. Manual and automated scanning;
- Penetration testing: simulates attack from hacker;
- Risk Assessment: analysis of security risks in the organization;
- Security auditing: internal inspection, can by done via inspection of code;
- Ethical hacking: hack software to expose flaws;
- Password cracking: self-explanatory;

Security Concepts:
- Confidentality: only those authorized to access can access;
- Integrity: information is actually right;
- Authentication: the user is who he says he is;
- Authorization: if a user should access a file, he can;
- Availability: services will be ready for use when expected;
- Non-repudiation: prevent the later denial that an action happened;

Black-box: not code-based;
White-box: code-based;

Test automation:
- Automatic test case generation;
- Automatic test case execution: tests are written in some executable language;

Equivalence class partitioning:
- Two sets, legal and illegal inputs;
- Each set can be split into subsets;

How to:
- Know what is supposed to happend;
- Partition the sets into classes;
- Know which inputs crash the test;
- Test cases for each class;

Partitioning:
- Unidimensional considers one input variable at a time;
- Multidimensional is to create input domains, generate a lot equivalence classes, hard to manage;

Boundary value tests edge cases, should work for middle values;

Cause-effect graphing links input (cause) to effect (output);

Pairwise testing: all discrete combinations for two parameters;

Error guessing;

Risk-based testing: test based on areas with higher impact;

Testing for race conditions;

Random testing (good for crashes, but unpredictable); 

Use a combinations of black box testing techniques.