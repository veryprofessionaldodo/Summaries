CDN -> Content Delivery Network

Caching is storing the contents with high number of hits in locations where they can be more efficiently downloaded. This way they can be better accessed.

Cache hit -> retrieve local copy of page;
Cache miss -> retrieve page from server;

Advantages:
- Less requests
- Less full responses
- Improved performance due to better response times
- Higher availability due to lower server and network load 

Disadvantages:
- Possibly stale data 

Challenges:
- How to cache? Pre-fetch and on-demand
- How long to cache? Based on expiration timestamp
- Requires fast search methods, and large amounts of space
- Where to cache? Three alternatives: 
    At the client:
        If a page is accessed frequently, it should be cached in the client, to avoid retrieving the page.
    Near the client: 
        Reduces traffic to distant servers, and reduces the response time due to physical proximity.
    At or near the server: 
	    Reduce load on main server and the same cache can serve many clients.
        
Explicit Caching:
- Local:
    Stores pages locally;
    Reduces network access;
    Very fast.
- Network:
    Communicates with proxies instead of the original server, faster access times and reduces main server load.
    Changes headers.

There are 6 directives to control cache access, such as (Mnemonic NNMMPP)
- No-cache: requires validation 
- No-store: no caching at all
- Must-revalidate: always requres validation
- Max-age: how long the content is considered fresh
- Public: allow caching with authorisation token 
- Private: caching only in browser

Cooperative caching:
- If the cache is stored in a single space, there is a single point of failure, and is more subject to storage problems. On cooperative caches, there is a higher availability of cache in case of miss. 
- To locate a page on a cooperative cache, there are two methods:
    Directory: Expensive to keep up to date, new point of failure
    Broadcast: Causes traffic, latency waiting for replies on a miss, can cause replication of cached contents;

Hash functions:
Mapping of large sets to small sets.
Are deterministic, uniform and fast to compute (DUF)

Cooperative caching with hashing is superior to local caching because of 6 reasons:
- No maintenance or query overhead;
- Unicast is sufficient to get object or discover a miss;
- Faster in discovering a miss;
- No single point of failure;
- No need for an intermediary cache;
- No redundant copies reduce miss rate;

Consistent hashing:
- Servers and pages mapped to the same identifier space, like a circle. 
- Pages are stored in the next server following the circle in a clockwise order. 
- Little impact on server upon change in number of servers;
- Hash function randomly distributes caches in the identifier space;

Content Delivery Network: 
- Networks with multiple distributed servers to provide the lowest RTT with a low miss rate;
- Replicates content that does not change frequently, redirects to best server and retrieves content on a miss;

The architecture contains the backend servers (the OG servers), geographically distributed servers around the world, and the clients know which are the best servers due to redirectors.

Conflicting goals, and a CDN wants to improve RTT while simultaneously balancing load. If a server is close, it can be overwhelmed, and the load is not evenly distributed among servers. The solution is to resolve which server to use by proximity first, and later by load balancing.

Uses DNS for the redirection.

Load balancing is done by sorting the server list by load, and use the first server below a certain load threshold;

Overlay enables optimization, as different services can have different solutions.